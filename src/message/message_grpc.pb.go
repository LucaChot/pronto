// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: src/message/message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PodPlacement_RequestPod_FullMethodName = "/message.PodPlacement/RequestPod"
)

// PodPlacementClient is the client API for PodPlacement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodPlacementClient interface {
	RequestPod(ctx context.Context, in *PodRequest, opts ...grpc.CallOption) (*EmptyReply, error)
}

type podPlacementClient struct {
	cc grpc.ClientConnInterface
}

func NewPodPlacementClient(cc grpc.ClientConnInterface) PodPlacementClient {
	return &podPlacementClient{cc}
}

func (c *podPlacementClient) RequestPod(ctx context.Context, in *PodRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, PodPlacement_RequestPod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodPlacementServer is the server API for PodPlacement service.
// All implementations must embed UnimplementedPodPlacementServer
// for forward compatibility.
type PodPlacementServer interface {
	RequestPod(context.Context, *PodRequest) (*EmptyReply, error)
	mustEmbedUnimplementedPodPlacementServer()
}

// UnimplementedPodPlacementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPodPlacementServer struct{}

func (UnimplementedPodPlacementServer) RequestPod(context.Context, *PodRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPod not implemented")
}
func (UnimplementedPodPlacementServer) mustEmbedUnimplementedPodPlacementServer() {}
func (UnimplementedPodPlacementServer) testEmbeddedByValue()                      {}

// UnsafePodPlacementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodPlacementServer will
// result in compilation errors.
type UnsafePodPlacementServer interface {
	mustEmbedUnimplementedPodPlacementServer()
}

func RegisterPodPlacementServer(s grpc.ServiceRegistrar, srv PodPlacementServer) {
	// If the following call pancis, it indicates UnimplementedPodPlacementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PodPlacement_ServiceDesc, srv)
}

func _PodPlacement_RequestPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodPlacementServer).RequestPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodPlacement_RequestPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodPlacementServer).RequestPod(ctx, req.(*PodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PodPlacement_ServiceDesc is the grpc.ServiceDesc for PodPlacement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PodPlacement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.PodPlacement",
	HandlerType: (*PodPlacementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestPod",
			Handler:    _PodPlacement_RequestPod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/message/message.proto",
}

const (
	AggregateMerge_RequestAggMerge_FullMethodName = "/message.AggregateMerge/RequestAggMerge"
)

// AggregateMergeClient is the client API for AggregateMerge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregateMergeClient interface {
	RequestAggMerge(ctx context.Context, in *DenseMatrix, opts ...grpc.CallOption) (*DenseMatrix, error)
}

type aggregateMergeClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregateMergeClient(cc grpc.ClientConnInterface) AggregateMergeClient {
	return &aggregateMergeClient{cc}
}

func (c *aggregateMergeClient) RequestAggMerge(ctx context.Context, in *DenseMatrix, opts ...grpc.CallOption) (*DenseMatrix, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DenseMatrix)
	err := c.cc.Invoke(ctx, AggregateMerge_RequestAggMerge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregateMergeServer is the server API for AggregateMerge service.
// All implementations must embed UnimplementedAggregateMergeServer
// for forward compatibility.
type AggregateMergeServer interface {
	RequestAggMerge(context.Context, *DenseMatrix) (*DenseMatrix, error)
	mustEmbedUnimplementedAggregateMergeServer()
}

// UnimplementedAggregateMergeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAggregateMergeServer struct{}

func (UnimplementedAggregateMergeServer) RequestAggMerge(context.Context, *DenseMatrix) (*DenseMatrix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAggMerge not implemented")
}
func (UnimplementedAggregateMergeServer) mustEmbedUnimplementedAggregateMergeServer() {}
func (UnimplementedAggregateMergeServer) testEmbeddedByValue()                        {}

// UnsafeAggregateMergeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregateMergeServer will
// result in compilation errors.
type UnsafeAggregateMergeServer interface {
	mustEmbedUnimplementedAggregateMergeServer()
}

func RegisterAggregateMergeServer(s grpc.ServiceRegistrar, srv AggregateMergeServer) {
	// If the following call pancis, it indicates UnimplementedAggregateMergeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AggregateMerge_ServiceDesc, srv)
}

func _AggregateMerge_RequestAggMerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenseMatrix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregateMergeServer).RequestAggMerge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregateMerge_RequestAggMerge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregateMergeServer).RequestAggMerge(ctx, req.(*DenseMatrix))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregateMerge_ServiceDesc is the grpc.ServiceDesc for AggregateMerge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregateMerge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.AggregateMerge",
	HandlerType: (*AggregateMergeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAggMerge",
			Handler:    _AggregateMerge_RequestAggMerge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/message/message.proto",
}
